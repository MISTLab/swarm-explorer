alias ptpstatus='sudo systemctl status ptp4l'
alias ptprestart='systemctl daemon-reload; sudo systemctl restart ptp4l'
alias lidar='ptprestart; roslaunch /home/rover/swarm-explorer/robot/ouster.launch sensor_hostname:=os-$LIDAR_SERIAL_NUMBER.local udp_dest:=$LIDAR_IP timestamp_mode:=TIME_FROM_PTP_1588 robot_id:=$ROBOT_ID'
alias cameraswheel='roslaunch realsense2_camera rs_d400_and_t265.launch topic_odom_in:=/rr_openrover_driver/odom_encoder calib_odom_file:=/home/rover/swarm-explorer/robot/config/wheelodom.json'
alias cameras='roslaunch /home/rover/swarm-explorer/robot/rs_d400_and_t265.launch robot_id:=$ROBOT_ID'
alias explorerbash='docker run --net=host -it lajoiepy/swarm-explorer:arm64 $ROS_IP bash'
alias roverstart='roslaunch /home/rover/swarm-explorer/robot/rover_driver.launch robot_id:=$ROBOT_ID'
alias entercontainer='docker exec -it $(docker container ls -q) /bin/bash'
alias roverstop='rostopic pub /r$ROBOT_ID/soft_estop/enable std_msgs/Bool "data: true" -1'
alias restart='rostopic pub /r$ROBOT_ID/soft_estop/reset std_msgs/Bool "data: true" -1'
alias exposureoff='rosrun dynamic_reconfigure dynparam set /r$(arg robot_id)/d400/rgb_camera enable_auto_exposure 0 && rosrun dynamic_reconfigure dynparam set /r$(arg robot_id)/d400/rgb_camera enable_auto_white_balance 0'
alias exposurefix='rosrun dynamic_reconfigure dynparam set /r$(arg robot_id)/t265/tracking_module exposure '
alias plan='rosservice call /r$ROBOT_ID/planner_control_interface/std_srvs/automatic_planning'
alias explorer='docker run --net=host -it lajoiepy/swarm-explorer:arm64 $ROS_IP explore $ROBOT_ID $MIN_AREA_UPDATE'
alias ros2bridge='docker run --net=host -it lajoiepy/swarm-explorer:arm64 $ROS_IP bridge'
alias objects='docker run --net=host -it lajoiepy/object-detection $ROS_IP $ROBOT_ID'
alias testros2='docker run --net=host -it lajoiepy/swarm-explorer:arm64 $ROS_IP testros2'
alias stop='rosservice call /r$ROBOT_ID/planner_control_interface/std_srvs/stop'

